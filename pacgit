#!/bin/sh

REPOS="/var/cache/pacgit-repos"

C='\033[1m\033[34m' # info color
E='\033[1m\033[31m' # error color
R='\033[0m'         # reset color

exists() {
    command -v "$1" >/dev/null
}

check_root() {
    if [ "$(id -u)" != 0 ]; then
        echo 'Root is needed'
        exit 1
    fi
}

info() {
    printf "${C}INFO:${R} %s\n" "$@"
}

err() {
    printf "${E}ERROR:${R} %s\n" "$@" >&2
}

pkg_build_install() {
    pac="$1"
    patch="$2"
    if [ -f setup.py ]; then
        pip3 install .
    else
        {
            if [ -f "$patch" ]; then
                info "Applying patch '$patch'"
                patch -i "$patch" || {
                    err "Failed applying patch '$patch'"
                    return 1
                }
            fi
            if [ -f CMakeLists.txt ]; then
                mkdir -p build &&
                    cd build &&
                    cmake ..
            fi
            if [ -f autogen.sh ]; then ./autogen.sh; fi
            if [ -f configure ];  then ./configure;  fi
        } && make && make install
    fi && info "Installed $pac"
}

pkg_install() {
    check_root

    patch=
    [ "$1" = '--patch' ] && {
        patch="$2"
        [ -f "$patch" ] || {
            err "File '$patch' is not a file"
            return 1
        }
        shift 2
    }

    pac="$1"; link="$2"
    dir="$REPOS/$pac"

    # if link is provided as the only arg
    [ -z "$link" ] && echo "$pac" | grep -q http && {
        link="$pac"; pac="${link##*/}"
        dir="$REPOS/$pac"
    }

    [ -d "$dir" ] || {
        info "clonning to '$dir'..."
        git clone --depth 1 "$link" "$dir"
    }

    if cd "$dir"; then
        # cleanup if needed
        git reset --hard
        git clean -fdx
    else
        err "dir '$dir' not found"
        return 1
    fi

    if exists "$pac"; then
        info "$pac is already installed"
        if git pull | grep 'up to date'; then
            return 0
        else
            info "updating $pac..."
            pkg_build_install "$pac" "$patch"
        fi
    else
        git pull
        pkg_build_install "$pac" "$patch"
    fi
}

pkg_uninstall() {
    check_root
    pac="$1"; link="$2"
    [ -n "$link" ] || {
        link="$pac"; pac="${link##*/}"
    }
    bin=$(which "$pac" 2>/dev/null)
    if [ -n "$bin" ]; then
        rm "$bin" &&
            rm -rf "${REPOS:?}/$pac" &&
            info "Uninstalled $pac"
    else
        err "'$pac' is not installed"
    fi
}

pkg_update_all() {
    check_root
    for dir in "$REPOS/"*; do
        pac=$(basename "$dir")
        pkg_install "$pac"
    done
}

pkg_list() {
    command ls -1 "$REPOS"
}

help() {
    SELF=$(basename "$0")
    echo "usage: $SELF [-SRu] [--patch] [NAME] [LINK]"
}

main() {
    mkdir -p "$REPOS"
    if [ $# -gt 0 ]; then
        cmd="$1"
        shift
        case "$cmd" in
            install|-S)   pkg_install   "$@" ;;
            uninstall|-R) pkg_uninstall "$@" ;;
            upgrade|-u)   pkg_update_all     ;;
            list|-Q)      pkg_list           ;;
            *)            help               ;;
        esac
    else
        help
    fi
}

main "$@"
